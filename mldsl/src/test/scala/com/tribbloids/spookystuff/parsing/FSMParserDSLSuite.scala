package com.tribbloids.spookystuff.parsing

import com.tribbloids.spookystuff.parsing.FSMParserDSL._
import com.tribbloids.spookystuff.testutils.FunSpecx

class FSMParserDSLSuite extends FunSpecx {

  it("can form linear graph") {

    val p = P_*('$') :~> P('{') :~> P_*('}') :~> FINISH
    p.visualise()
      .ASCIIArt()
      .shouldBe(
        """
          | ╔═══════════════╗ ╔═══════════════╗
          | ║(TAIL>>-) [ ∅ ]║ ║(TAIL-<<) [ ∅ ]║
          | ╚══════════════╤╝ ╚═══════╤═══════╝
          |                │          │
          |                │ ┌────────┘
          |                │ │
          |                v v
          |              ╔═════╗
          |              ║START║
          |              ╚══╤══╝
          |                 │
          |                 v
          |         ╔═══════════════╗
          |         ║ [ '$' [0...] ]║
          |         ╚═══════╤═══════╝
          |                 │
          |                 v
          |               ╔═══╗
          |               ║---║
          |               ╚══╤╝
          |                  │
          |                  v
          |           ╔════════════╗
          |           ║ [ '{' [0] ]║
          |           ╚═════╤══════╝
          |                 │
          |                 v
          |               ╔═══╗
          |               ║---║
          |               ╚═╤═╝
          |                 │
          |                 v
          |         ╔═══════════════╗
          |         ║ [ '}' [0...] ]║
          |         ╚════════╤══════╝
          |                  │
          |                  v
          |              ╔══════╗
          |              ║FINISH║
          |              ╚═══╤══╝
          |                  │
          |                  v
          |           ╔════════════╗
          |           ║(HEAD) [ ∅ ]║
          |           ╚════════════╝
        """.stripMargin
      )
  }

  it("can form non-linear graph") {

    val p = P_*('P') :~> (P('1') U P('2')) :~> FINISH
    p.visualise()
      .ASCIIArt()
      .shouldBe(
        """
          | ╔═══════════════╗ ╔═══════════════╗
          | ║(TAIL>>-) [ ∅ ]║ ║(TAIL-<<) [ ∅ ]║
          | ╚══════════════╤╝ ╚═══════╤═══════╝
          |                │          │
          |                │ ┌────────┘
          |                │ │
          |                v v
          |              ╔═════╗
          |              ║START║
          |              ╚══╤══╝
          |                 │
          |                 v
          |         ╔═══════════════╗
          |         ║ [ 'P' [0...] ]║
          |         ╚═══════╤═══════╝
          |                 │
          |                 v
          |              ╔═════╗
          |              ║ --- ║
          |              ╚═╤═╤═╝
          |                │ │
          |         ┌──────┘ └──────┐
          |         │               │
          |         v               v
          |  ╔════════════╗  ╔════════════╗
          |  ║ [ '2' [0] ]║  ║ [ '1' [0] ]║
          |  ╚══════╤═════╝  ╚╤═══════════╝
          |         │         │
          |         └───────┐ │
          |                 │ │
          |                 v v
          |              ╔══════╗
          |              ║FINISH║
          |              ╚═══╤══╝
          |                  │
          |                  v
          |           ╔════════════╗
          |           ║(HEAD) [ ∅ ]║
          |           ╚════════════╝
        """.stripMargin
      )
  }

  it("can form loop") {

    val start = P_*('{')
    val p = start :~> P_*('}') :& start :~> EOS :~> FINISH
    p.visualise()
      .ASCIIArt()
      .shouldBe(
        """
          |  ╔═══════════════╗  ╔═══════════════╗
          |  ║(TAIL>>-) [ ∅ ]║  ║(TAIL-<<) [ ∅ ]║
          |  ╚═══════╤═══════╝  ╚╤══════════════╝
          |          │           │
          |          └────────┐  │
          |                   │  │
          |                   v  v
          |                ╔═══════╗
          |                ║ START ║
          |                ╚═╤═╤═══╝
          |                  │ │ ^
          |         ┌────────┘ │ └──────────────────┐
          |         │          │                    │
          |         v          v                    │
          | ╔═══════════════╗ ╔═══════════════════╗ │
          | ║ [ '{' [0...] ]║ ║ [ '[EOS]' [0...] ]║ │
          | ╚══════╤════════╝ ╚═╤═════════════════╝ │
          |        │     ┌──────┼───────────────────┘
          |        v     │      v
          |      ╔═══╗   │  ╔══════╗
          |      ║---║   │  ║FINISH║
          |      ╚══╤╝   │  ╚═══╤══╝
          |         │    │      │
          |         │    │      └────────┐
          |         │    │               │
          |         v    │               v
          |   ╔══════════╧════╗   ╔════════════╗
          |   ║ [ '}' [0...] ]║   ║(HEAD) [ ∅ ]║
          |   ╚═══════════════╝   ╚════════════╝
        """.stripMargin
      )
  }

  it("can form self-loop") {

    val escape = P_*('\\')
    val p = escape :& escape :~> P_*('$') :~> FINISH
    p.visualise()
      .ASCIIArt()
      .shouldBe(
        """
          | ╔═══════════════╗ ╔═══════════════╗
          | ║(TAIL>>-) [ ∅ ]║ ║(TAIL-<<) [ ∅ ]║
          | ╚══════════════╤╝ ╚═══════╤═══════╝
          |                │          │
          |                │  ┌───────┘
          |                │  │
          |                v  v
          |             ╔═══════╗
          |             ║ START ║
          |             ╚═╤═══╤═╝
          |               │ ^ │
          |               │ │ └───────┐
          |               │ └──┐      │
          |               │    └─┐    │
          |               v      │    │
          |   ╔═══════════════╗  │    │
          |   ║ [ '$' [0...] ]║  │    │
          |   ╚══════╤════════╝  │    │
          |          │           │    │
          |          v           │    │
          |      ╔══════╗        │    │
          |      ║FINISH║        │    │
          |      ╚═╤════╝        │    │
          |        │             │    │
          |        v             │    v
          | ╔════════════╗ ╔═════╧═════════╗
          | ║(HEAD) [ ∅ ]║ ║ [ '\' [0...] ]║
          | ╚════════════╝ ╚═══════════════╝
        """.stripMargin
      )
  }

}
